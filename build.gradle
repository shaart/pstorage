buildscript {
    ext {
        javaSourcesVersion = "17"
        javaTargetVersion = "17"

        javaFxPluginVersion = "0.0.13"
        javaFxVersion = "17"

        lombokVersion = "1.18.26"
        liquibaseVersion = "3.7.0"
        springBootPluginVersion = "3.0.2"
        springDependencyManagementPluginVersion = "1.1.0"

        checkstylePluginToolVersion = "10.7.0"
    }
}

plugins {
    id "org.springframework.boot" version "$springBootPluginVersion"
    id "java"
    id "application"
    id "checkstyle"
    id "io.spring.dependency-management" version "$springDependencyManagementPluginVersion"
    id "org.openjfx.javafxplugin" version "$javaFxPluginVersion"
}

def majorVersion = 0
def minorVersion = 1
def fixVersion = 0
version = "$majorVersion.$minorVersion.$fixVersion" as Object

group = "com.github.shaart"
mainClassName = "shaart.pstorage.PstorageApplication"

java {
    sourceCompatibility = "$javaSourcesVersion" as Object
    targetCompatibility = "$javaTargetVersion" as Object
}

jar {
    enabled = false
}

javafx {
    version = "$javaFxVersion"
    modules = ["javafx.controls", "javafx.fxml", "javafx.swing"]
    configuration = 'compileOnly'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Security
    implementation "org.springframework.boot:spring-boot-starter-security"

    // Data
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    runtimeOnly "com.h2database:h2"
    implementation "org.liquibase:liquibase-core:$liquibaseVersion"

    // Annotations
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // Tests
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
}

checkstyle {
    toolVersion "$checkstylePluginToolVersion"
    configFile file("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
    source = "src/main/java"
}
checkstyleTest {
    source = "src/test/java"
}

tasks.withType(Checkstyle) {
    maxWarnings 0
    maxErrors 0
    reports {
        xml.required = false
        html.required = true
        html.stylesheet resources.text.fromFile("config/xsl/checkstyle-noframes-severity-sorted.xsl")
    }
}
